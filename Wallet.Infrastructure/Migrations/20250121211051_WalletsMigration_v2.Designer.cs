// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wallet.Infrastructure;

#nullable disable

namespace Wallet.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDBContext))]
    [Migration("20250121211051_WalletsMigration_v2")]
    partial class WalletsMigration_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wallet.Domain.Models.AccountOfPerson.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("HeadMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("HeadMemberId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.FamilyMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("OwnerId");

                    b.HasIndex("WalletId");

                    b.ToTable("FamilyMembers");

                    b.HasDiscriminator().HasValue("FamilyMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Wallets");

                    b.HasDiscriminator().HasValue("Wallet");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.HeadMember", b =>
                {
                    b.HasBaseType("Wallet.Domain.Models.WalletOfFamily.FamilyMember");

                    b.HasDiscriminator().HasValue("HeadMember");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.SubWallet", b =>
                {
                    b.HasBaseType("Wallet.Domain.Models.WalletOfFamily.Wallet");

                    b.Property<long>("ParentWalletId")
                        .HasColumnType("bigint");

                    b.HasIndex("ParentWalletId");

                    b.HasDiscriminator().HasValue("SubWallet");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.Family", b =>
                {
                    b.HasOne("Wallet.Domain.Models.WalletOfFamily.HeadMember", "HeadMember")
                        .WithMany()
                        .HasForeignKey("HeadMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadMember");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.FamilyMember", b =>
                {
                    b.HasOne("Wallet.Domain.Models.WalletOfFamily.SubWallet", null)
                        .WithMany("FamilyMembers")
                        .HasForeignKey("WalletId");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.Wallet", b =>
                {
                    b.HasOne("Wallet.Domain.Models.WalletOfFamily.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.SubWallet", b =>
                {
                    b.HasOne("Wallet.Domain.Models.WalletOfFamily.Wallet", "ParentWallet")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wallet.Domain.Models.WalletOfFamily.Wallet", null)
                        .WithMany("SubWallets")
                        .HasForeignKey("ParentWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentWallet");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.Wallet", b =>
                {
                    b.Navigation("SubWallets");
                });

            modelBuilder.Entity("Wallet.Domain.Models.WalletOfFamily.SubWallet", b =>
                {
                    b.Navigation("FamilyMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
